!function e(n,r,t){function i(u,s){if(!r[u]){if(!n[u]){var c="function"==typeof require&&require;if(!s&&c)return c(u,!0);if(o)return o(u,!0);var f=new Error("Cannot find module '"+u+"'");throw f.code="MODULE_NOT_FOUND",f}var a=r[u]={exports:{}};n[u][0].call(a.exports,function(e){var r=n[u][1][e];return i(r?r:e)},a,a.exports,e,n,r,t)}return r[u].exports}for(var o="function"==typeof require&&require,u=0;u<t.length;u++)i(t[u]);return i}({1:[function(e,n,r){var t=e("./lib/parse").all,i=e("./lib/units"),o=e("./lib/rewrite");n.exports=function(e,n,r){return"number"==typeof e?e:t(o(e,r),n||i)},n.exports.units=i},{"./lib/parse":2,"./lib/rewrite":3,"./lib/units":4}],2:[function(e,n,r){function t(e,n){var r,t,c=[];if(e=o(e),!s().test(e)||!/\d+[\w\s\,]+/.test(e)||!/[\wçığöşü]$/.test(e))throw new Error('Invalid time: "'+e+'"');for(r=s();t=r.exec(e);)c.push(t[1]);for(var f=c.length;f--;)c[f]=u(c[f],n);return c=c.filter(i),0!=c.length?c.reduce(function(e,n){return e+n}):void 0}function i(e){return!!e}function o(e){return e.toLowerCase()}function u(e,n){var r,t,i;return r=e.split(c),t=r[1],i=r[2],n[i]?n[i](parseInt(t)):void 0}function s(){return/(\d+\s*[\wçığöşü]+)/g}var c=/(\d+)\s?([\wçığöşü]+)/;n.exports={all:t,one:u}},{}],3:[function(e,n,r){function t(e,n,r){var t=new RegExp("((?:[a-z]\\s)|^)("+(r||o).join("|")+")(?=\\s|$)","g"),u=e.replace(t,function(e,n,r){var t=o.indexOf(r);return n+(-1==t?r:t)});return t=new RegExp("((?:[a-z]\\s)|^)("+(n||i).join("|")+")(?=\\s|$)","g"),u=u.replace(t,function(e,n,r){return n+"1 "+r})}var i=["millisecond","second","minute","hour","day","week","month","year"],o=["zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve"];n.exports=t},{}],4:[function(e,n,r){function t(e){return e}function i(e,n){return function(r){return e(r)*n}}var o=i(t,1e3),u=i(o,60),s=i(u,60),c=i(s,24),f=i(c,7),a=i(c,31),l=i(a,12);n.exports={m:t,ms:t,millisec:t,millisecs:t,millisecond:t,milliseconds:t,s:o,sec:o,secs:o,seconds:o,second:o,m:u,min:u,mins:u,minute:u,minutes:u,h:s,hour:s,hours:s,d:c,day:c,days:c,w:f,week:f,weeks:f,mo:a,month:a,months:a,y:l,year:l,years:l}},{}],5:[function(e,n,r){"use strict";e("english-time-mirror");$(document).ready(function(){var e=io.connect(window.location.href);e.on("news",function(n){console.log(n),e.emit("my other event",{my:"data"})})})},{"english-time-mirror":1}]},{},[5]);
//# sourceMappingURL=data:application/json;base64,
